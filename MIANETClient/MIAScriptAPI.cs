/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MIAScriptAPI {
  public interface ISync {
    string MIGetTaskParam(string ParamName);
    void MISetTaskParam(string ParamName, string ParamValue);
    void MILogMsg(string Message);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_MIGetTaskParam(AsyncCallback callback, object state, string ParamName);
    string End_MIGetTaskParam(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_MISetTaskParam(AsyncCallback callback, object state, string ParamName, string ParamValue);
    void End_MISetTaskParam(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_MILogMsg(AsyncCallback callback, object state, string Message);
    void End_MILogMsg(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_MIGetTaskParam(AsyncCallback callback, object state, string ParamName)
    {
      return send_MIGetTaskParam(callback, state, ParamName);
    }

    public string End_MIGetTaskParam(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_MIGetTaskParam();
    }

    #endif

    public string MIGetTaskParam(string ParamName)
    {
      #if !SILVERLIGHT
      send_MIGetTaskParam(ParamName);
      return recv_MIGetTaskParam();

      #else
      var asyncResult = Begin_MIGetTaskParam(null, null, ParamName);
      return End_MIGetTaskParam(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_MIGetTaskParam(AsyncCallback callback, object state, string ParamName)
    #else
    public void send_MIGetTaskParam(string ParamName)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("MIGetTaskParam", TMessageType.Call, seqid_));
      MIGetTaskParam_args args = new MIGetTaskParam_args();
      args.ParamName = ParamName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_MIGetTaskParam()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      MIGetTaskParam_result result = new MIGetTaskParam_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MIGetTaskParam failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_MISetTaskParam(AsyncCallback callback, object state, string ParamName, string ParamValue)
    {
      return send_MISetTaskParam(callback, state, ParamName, ParamValue);
    }

    public void End_MISetTaskParam(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_MISetTaskParam();
    }

    #endif

    public void MISetTaskParam(string ParamName, string ParamValue)
    {
      #if !SILVERLIGHT
      send_MISetTaskParam(ParamName, ParamValue);
      recv_MISetTaskParam();

      #else
      var asyncResult = Begin_MISetTaskParam(null, null, ParamName, ParamValue);
      End_MISetTaskParam(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_MISetTaskParam(AsyncCallback callback, object state, string ParamName, string ParamValue)
    #else
    public void send_MISetTaskParam(string ParamName, string ParamValue)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("MISetTaskParam", TMessageType.Call, seqid_));
      MISetTaskParam_args args = new MISetTaskParam_args();
      args.ParamName = ParamName;
      args.ParamValue = ParamValue;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_MISetTaskParam()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      MISetTaskParam_result result = new MISetTaskParam_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_MILogMsg(AsyncCallback callback, object state, string Message)
    {
      return send_MILogMsg(callback, state, Message);
    }

    public void End_MILogMsg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_MILogMsg();
    }

    #endif

    public void MILogMsg(string Message)
    {
#if !SILVERLIGHT
      // Console.WriteLine("MIAScriptAPI.MILogMsg here with " + Message);
      send_MILogMsg(Message);
      recv_MILogMsg();

      #else
      var asyncResult = Begin_MILogMsg(null, null, Message);
      End_MILogMsg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_MILogMsg(AsyncCallback callback, object state, string Message)
    #else
    public void send_MILogMsg(string Message)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("MILogMsg", TMessageType.Call, seqid_));
      MILogMsg_args args = new MILogMsg_args();
      args.Message = Message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_MILogMsg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      MILogMsg_result result = new MILogMsg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["MIGetTaskParam"] = MIGetTaskParam_Process;
      processMap_["MISetTaskParam"] = MISetTaskParam_Process;
      processMap_["MILogMsg"] = MILogMsg_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void MIGetTaskParam_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      MIGetTaskParam_args args = new MIGetTaskParam_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      MIGetTaskParam_result result = new MIGetTaskParam_result();
      try
      {
        result.Success = iface_.MIGetTaskParam(args.ParamName);
        oprot.WriteMessageBegin(new TMessage("MIGetTaskParam", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("MIGetTaskParam", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void MISetTaskParam_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      MISetTaskParam_args args = new MISetTaskParam_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      MISetTaskParam_result result = new MISetTaskParam_result();
      try
      {
        iface_.MISetTaskParam(args.ParamName, args.ParamValue);
        oprot.WriteMessageBegin(new TMessage("MISetTaskParam", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("MISetTaskParam", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void MILogMsg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      MILogMsg_args args = new MILogMsg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      MILogMsg_result result = new MILogMsg_result();
      try
      {
        iface_.MILogMsg(args.Message);
        oprot.WriteMessageBegin(new TMessage("MILogMsg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("MILogMsg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MIGetTaskParam_args : TBase
  {
    private string _ParamName;

    public string ParamName
    {
      get
      {
        return _ParamName;
      }
      set
      {
        __isset.ParamName = true;
        this._ParamName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ParamName;
    }

    public MIGetTaskParam_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ParamName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MIGetTaskParam_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamName != null && __isset.ParamName) {
          field.Name = "ParamName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ParamName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MIGetTaskParam_args(");
      bool __first = true;
      if (ParamName != null && __isset.ParamName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParamName: ");
        __sb.Append(ParamName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MIGetTaskParam_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public MIGetTaskParam_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MIGetTaskParam_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MIGetTaskParam_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MISetTaskParam_args : TBase
  {
    private string _ParamName;
    private string _ParamValue;

    public string ParamName
    {
      get
      {
        return _ParamName;
      }
      set
      {
        __isset.ParamName = true;
        this._ParamName = value;
      }
    }

    public string ParamValue
    {
      get
      {
        return _ParamValue;
      }
      set
      {
        __isset.ParamValue = true;
        this._ParamValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ParamName;
      public bool ParamValue;
    }

    public MISetTaskParam_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ParamName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ParamValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MISetTaskParam_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamName != null && __isset.ParamName) {
          field.Name = "ParamName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ParamName);
          oprot.WriteFieldEnd();
        }
        if (ParamValue != null && __isset.ParamValue) {
          field.Name = "ParamValue";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ParamValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MISetTaskParam_args(");
      bool __first = true;
      if (ParamName != null && __isset.ParamName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParamName: ");
        __sb.Append(ParamName);
      }
      if (ParamValue != null && __isset.ParamValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParamValue: ");
        __sb.Append(ParamValue);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MISetTaskParam_result : TBase
  {

    public MISetTaskParam_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MISetTaskParam_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MISetTaskParam_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MILogMsg_args : TBase
  {
    private string _Message;

    public string Message
    {
      get
      {
        return _Message;
      }
      set
      {
        __isset.Message = true;
        this._Message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Message;
    }

    public MILogMsg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MILogMsg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.Message) {
          field.Name = "Message";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MILogMsg_args(");
      bool __first = true;
      if (Message != null && __isset.Message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MILogMsg_result : TBase
  {

    public MILogMsg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MILogMsg_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MILogMsg_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
